variable of a class: a copy of the class that is not initialized.
instance of a class: a copy of the class initalized by using the new keyword , memory is allocated.
reference of a class: a copy of the class that is created by using existing instance. Since it is referenced, new objects are in same memory locatioon
and new objects wont have any NEW memory allocation!
--------------------------------ACCESS SPECIFIERS -------------------------------------------------
private : u kno, public : u kno too 
protected: only accesssible when it is used in an inheritance, when child is inherited by parent it is accesible.
intrenal :Accessible only with same assembly (DLL and EXE)(same assembly means code is compiled together and located in same output file). different assemblies cant access to internal variables !
-------------------------VARIABLE TYPES -----------------------------------------------------------
Non-static : int y; must create an instance to access. memory is located after creating an instance
Static: static int y; Accessible without instance and also variables inside a static block are static too.
Constant: const float pi = 3.14f; cant be modified once after their declaration. Doesnt require instance of a class.
ReadOnly:readonly bool flag;  caninitialized in constructor. doesnt require to initialize at declaration. Behavior is similar to non static variables ! 
---------------------- INHERITANCE---------------------------------------------------
1)Parent class constructor must be accessible to child class or else inheritance will not be possible
2)In inheritance child classes can access parent classes members but a parent class can never access  child class members.
3) If the parent classes constructor is parameterized, then we have to use base keyword to call it with child class
ex:public Class() = base(12)  => by this way we sent int 12 to parent classes consturctor as parameter
-----------------METHOD OVERLOADING-------------------------------
Defining a method multiple times with different parameters and same or different outputs. This means overloading.
-----------------OVERLOADING vs OVERRIDING--------------------------
Overloading is defining multiple behaviours to a method with the change of the input. Overriding is changing the behaviour of the parent class.
Parent-child inheritance is required for overriding
-----------------ABSTRACT CLASS AND METHODS----------------
abstract method is a method without a body and abstract class is a class which contains any abstract member.
-!-declare abstract method in parent class and use abstract keyword when defining the parent class. AFter that we can define this abstract method in our child parent with same name with different logic and return statements.!!
----------------------INTERFACES--------------------------------
this is also an user defined data type like classes. Difference is we can't define any method body here,we only define methods without a body and we implement body logic in a child class!!
--------------------ENUM-------------------
Enum is a special 'class' that represents a group of constants(read-only) values.
enum Level {
Low,
Medium,
High
}

Level variable1 = Level.Medium; //accessing enum items
----------------------PROPERTIES---------------------------
Variables declared in classes are private in default.To access them from outside we should define them public which leads to limitless access to outside scopes, it is not very safe. To restrict this don't declare them as public, use properties. with properties we set getter and setter so we give access however we want.

Example: 
public double RadiusProperty {
get{return Radius;}
set{Radius= value;}
} //we defined getter and setter 

double radius = c.RadiusProperty; // c is an object of the class where we are in scope
c.RadiusProperty= 55;
}


//PUTTING _ to the head of variablename will let other coders understand it is a propery.
ex: double _Radius;
