variable of a class: a copy of the class that is not initialized.
instance of a class: a copy of the class initalized by using the new keyword , memory is allocated.
reference of a class: a copy of the class that is created by using existing instance. Since it is referenced, new objects are in same memory locatioon
and new objects wont have any NEW memory allocation!
--------------------------------ACCESS SPECIFIERS -------------------------------------------------
private : u kno, public : u kno too 
protected: only accesssible when it is used in an inheritance, when child is inherited by parent it is accesible.
intrenal :Accessible only with same assembly (DLL and EXE)(same assembly means code is compiled together and located in same output file). different assemblies cant access to internal variables !
-------------------------VARIABLE TYPES -----------------------------------------------------------
Non-static : int y; must create an instance to access. memory is located after creating an instance
Static: static int y; Accessible without instance and also variables inside a static block are static too.
Constant: const float pi = 3.14f; cant be modified once after their declaration. Doesnt require instance of a class.
ReadOnly:readonly bool flag;  caninitialized in constructor. doesnt require to initialize at declaration. Behavior is similar to non static variables ! 
---------------------- INHERITANCE---------------------------------------------------
1)Parent class constructor must be accessible to child class or else inheritance will not be possible
2)In inheritance child classes can access parent classes members but a parent class can never access  child class members.
3) If the parent classes constructor is parameterized, then we have to use base keyword to call it with child class
ex:public Class() = base(12)  => by this way we sent int 12 to parent classes consturctor as parameter
-----------------METHOD OVERLOADING-------------------------------
Defining a method multiple times with different parameters and same or different outputs. This means overloading.
